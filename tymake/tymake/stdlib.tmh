/* tymake standard library */

if(!defined(STDLIB_TMH))
{
	STDLIB_TMH = 1;
	STDLIB = 1;
	STDLIB_VER = 1;

	export function downloadextract(string uri)
	{
		dfile = download(uri, 1);
		return extract(dfile, 1);
	}

	export function downloadextract(string uri, string member)
	{
		return downloadextract(uri) + "/" + member;
	}

	export function downloadextract(string uri, string member, string default)
	{
		if(default == "")
		{
			return downloadextract(uri, member);
		}
		else
		{
			return default;
		}
	}

	export function downloadextract(string uri, string member, void default)
	{
		return downloadextract(uri, member, "");
	}

	export function typroject(string name, string config, string tools_ver, int unsafe)
	{
		return typroject(name, config, tools_ver, unsafe, [], []);
	}

	export function typroject(string name, string config, string tools_ver, int unsafe, array imports)
	{
		return typroject(name, config, tools_ver, unsafe, imports, []);
	}

	export function typroject(string name, string config, string tools_ver, int unsafe, array imports, array ref_overrides)
	{
		return typroject(name, config, tools_ver, unsafe, imports, ref_overrides, 1);
	}

	__typroject_loaded = [=];

	export function typrojectfromoutput(string output_name)
	{
		return __typroject_loaded.get(output_name);
	}

	export function typroject(string name, string config, string tools_ver, int unsafe, array imports, array ref_overrides, int add_depends)
	{
		TYPROJECT_LIBDIR ?= "";

		_p = _typroject(name, config, tools_ver, unsafe, imports, ref_overrides, TYPROJECT_LIBDIR);

		_depends = [];
		if(add_depends != 0)
		{
			foreach(dep in _p.ProjectReferences)
			{
				_depends.add(typroject(dep, config, tools_ver, unsafe, [], ref_overrides));
			}
		}
		if(defined(TYPROJECT_EXTRADEPENDS))
		{
			_depends.addrange(TYPROJECT_EXTRADEPENDS);
		}

		_depends.add(dir(_p.OutputFile));

		rulefor(_p.OutputFile, _p.Sources, _depends, function()
		{
			_p.Build();
		});

		rulefor(dir(_p.OutputFile), [], [], function()
		{
			mkdir(_RULE_OUTPUT);
		});

		__typroject_loaded.add(_p.OutputFile, _p);
		return _p.OutputFile;
	}

	export function typroject(string name)
	{
		TYPROJECT_CONFIG ?= "Release";
		TYPROJECT_UNSAFE ?= 1;
		TYPROJECT_TOOLSVER ?= "4.6.1";
		return typroject(name, TYPROJECT_CONFIG, TYPROJECT_TOOLSVER, TYPROJECT_UNSAFE);
	}

	function _find(string path, string name, array _path_splits, array _exts)
	{
		foreach(_path_split in _path_splits)
		{
			if(_path_split == "")
			{
				_test = path;
			}
			else
			{
				_test = _path_split + "/" + path;
			}

			foreach(_ext in _exts)
			{
				_test2 = _test + _ext;
				if(exists(_test2))
				{
					print("Using " + _test2 + " for " + name + "\n");

					if(_path_split == "")
					{
						_ret_dir = dir(_test2);
						if(_ret_dir != "")
						{
							_add = input("Add " + _ret_dir + " to PATH? (y/n)", "n");
							if(_add == "y" || _add == "Y")
							{
								PATH += ";" + _ret_dir;
								export PATH;
							}
						}
					}

					return _test2;
				}
			}
		}

		return "";
	}

	export function find(string name, string desc)
	{
		return find(name, desc, "");
	}

	export function find(string name, string desc, void test)
	{
		return find(name, desc, "");
	}

	export function find(string name, string desc, string test)
	{
		return find(name, desc, test, []);
	}

	export function find(string name, string desc, void test, array extra_paths)
	{
		return find(name, desc, "", extra_paths);
	}

	export function find(string name, string desc, string test, array extra_paths)
	{
		_path_splits = PATH.split(PATH_SPLIT);
		_path_splits.add("");
		_path_splits.add("/");

		foreach(_extra_path in extra_paths)
		{
			_path_splits.add(_extra_path);
		}

		_exts = [ "" ];
		_exts.addrange(EXEC_EXTENSIONS);

		if(test == "")
		{
			test = name;
		}

		_ret = _find(test, name, _path_splits, _exts);
		if(_ret != "")
		{
			return _ret;
		}

		_new_path = input("Please provide the full path of " + name + " (" + desc + ")");
		_ret = _find(_new_path, name, _path_splits, _exts);
		if(_ret != "")
		{
			return _ret;
		}

		print("error: Could not find " + _new_path + "\n");
		exit(-1);
	}

	export function find(string name)
	{
		return find(name, "");
	}

	export function input(string prompt)
	{
		print(prompt);
		print(": ");
		return input();
	}

	export function input(string prompt, string default)
	{
		if(DEFAULTS == 1 && default != "")
		{
			return default;
		}
		
		print(prompt);
		print(" [");
		print(default);
		print("]: ");

		_ret = input();
		if(_ret == "")
		{
			return default;
		}
		return _ret;
	}

	export function exit()
	{
		exit(0);
	}

	export function input(string prompt, array options)
	{
		return input(prompt, options, "");
	}

	export function input(string prompt, array options, string default)
	{
		if(DEFAULTS == 1 && default != "")
		{
			return default;
		}

		print(prompt);
		print(" (");
		comma = 0;
		for(i = 0; i < options.length; i = i + 1)
		{
			if(i != 0)
			{
				print("/");
			}
			print(options[i]);
		}
		print(")");

		if(default != "")
		{
			print(" [");
			print(default);
			print("]");
		}

		print(": ");

		_ret = input();
		if(_ret == "")
		{
			_ret = default;
		}

		found = 0;
		foreach(s in options)
		{
			if(_ret == s)
			{
				return _ret;
			}
		}

		return input(prompt, options, default);
	}
}
