// Grab configuration if it exists
if(exists("tymake/config.tmk"))
{
	include "tymake/config.tmk";
}

// Say hi

setoutputcolor(["cyan"]);
print("--------------------------------\n");
print("Building tysos\n");
print("--------------------------------\n");
print("\n");
print("Configuration\n");
print("--------------------------------\n");
setoutputcolor([]);

// Configuration
TARGET ?= input("Architecture", [ "x86_64", "x86", "arm" ], "x86_64");
MAKE_ISO ?= input("Build an ISO image", [ "y", "n" ], "y");
TYSILAFLAGS ?= input("Extra tysila flags (e.g. -fprofile)", " ");
ROOT ?= input("Path to root tysos directory", ".");

function x86_yasm()
{
	export YASM = find("nasm", "nasm compatible compiler", NASM);
	rulefor("%.o", [ "%.asm" ], [ THIS ], function()
	{
		shellcmd("$YASM $YASMFLAGS -o $_RULE_OUTPUT $_RULE_INPUT");
	});
}

function uefi_finds()
{
	if(MAKE_ISO == "y")
	{
		export EFICC = find("x86_64-w64-mingw32-gcc", "cross compiler for x64 UEFI", EFICC);
		export EFIAR = find("x86_64-w64-mingw32-ar", "cross archiver for x64 UEFI", EFIAR);
		export MKFAT = find("mkfat", "mkfat utility (http://www.tysos.org/redmine/projects/tysos/wiki/EFI)", MKFAT);
		export GZIP = find("gzip", "gzip", GZIP);
	}
}

function grub_finds()
{
	if(MAKE_ISO == "y")
	{
		export GRUBCC = find("i686-elf-gcc", "cross compiler for i686", GRUBCC);
		export GRUBAR = find("i686-elf-ar", "cross archiver for i686", GRUBAR);
		export GRUBSRC = find("multiboot.h", "multiboot.h file in grub include directory", "c:/grub/include/multiboot.h");
		export GRUBSRC = dir(GRUBSRC);
		export CDBOOT = find("cdboot.img", "GRUB cdboot.img", "", [ downloadextract("ftp://ftp.gnu.org/gnu/grub/grub-2.02-for-windows.zip", "grub-2.02-for-windows/i386-pc", GRUBBIN) ]);
		export GZIP = find("gzip", "gzip", GZIP);

		export GRUB_MKIMAGE = find("grub-mkimage.exe", "GRUB mkimage tool", GRUB_MKIMAGE, [ dir(dir(CDBOOT)) ]);
	}
}

function tycobj(string name)
{
	return ROOT + "/tysos/" + name;
}

if (TARGET == "x86_64")
{
	XCC = find("x86_64-elf-gcc", "cross compiler for x86_64-elf", XCC);
	XAR = find("x86_64-elf-ar", "cross archiver for x86_64-elf", XAR);
	XOBJCOPY = find("x86_64-elf-objcopy", "cross objcopy for x86_64", XOBJCOPY);
	XRANLIB = find("x86_64-elf-ranlib", "cross ranlib for x86_64-elf", XRANLIB);
	YASMFLAGS = "-felf64";
	TYSILAARCH = "x86_64";
	TLARCH = "x86_64-elf-tyobj";
	LDFLAGS = "-fno-use-linker-plugin -Ttext 0x40000000 -nostdlib";
	TYSOS_CPU_OBJ = [ tycobj("x86_64/cpu.o"), tycobj("x86_64/halt.o"), tycobj("x86_64/exceptions.o"), tycobj("x86_64/switcher.o") ];
	LIBSUPCS_CPU_OBJ = [ ROOT + "/libsupcs/x86_64_cpu.o",
		ROOT + "/libsupcs/x86_64_Invoke.o",
		ROOT + "/libsupcs/x86_64_Spinlock.o" ];
	CFLAGS = "-ffreestanding -mno-red-zone";

	if(!USE_GRUB)
	{
		USE_UEFI = 1;
	}
	
	x86_yasm();
}
else if (TARGET == "x86")
{
	XCC = find("i586-elf-gcc", "cross compiler for i586-elf", XCC);
	XAR = find("i586-elf-gcc", "cross archiver for i586-elf", XAR);
	XOBJCOPY = find("i586-elf-objcopy", "cross objcopy for i586", XOBJCOPY);
	YASMFLAGS = "-felf";
	TYSILAARCH = "i586";
	TLARCH = "x86-elf-tyobj";

	if(!USE_UEFI)
	{
		USE_GRUB = 1;
	}

	x86_yasm();
}
else if (TARGET == "arm")
{
	XCC = find("arm-none-elf-gcc", "cross compiler for arm-none-elf", XCC);
	TYSILAARCH = "arm-elf-tysos";
}
else
{
	print("Unknown architecture: " + TARGET + "\n");
	exit();
}
//TL ?= find("tl", "Tysos linker", TL);

if(USE_UEFI)
{
	uefi_finds();
}
if(USE_GRUB)
{
	grub_finds();
}

setoutputcolor(["cyan"]);
print("--------------------------------\n");
print("Building\n");
print("--------------------------------\n");
setoutputcolor([]);

// Rules

TYPROJECT_EXTRADEPENDS = [ THIS ];
LDFLAGS = "$LDFLAGS -Wl,--gc-sections";



/* Make all run-time assemblies depend on the dotnet corlib and this file */
//TYPROJECT_LIBDIR = COREFX_LIBDIR;
REF_OVERRIDES = [ ];



/* Rules for char-conversions */
CC_DIR = ROOT + "/unicode_support/char-conversions";
CHAR_CONVERSIONS_PROG = typroject(CC_DIR + "/char-conversions.csproj", "Release", "4.6.1", 1, [], REF_OVERRIDES);
CC_INTERMEDIATE = CC_DIR + "/category-dump";
CC_OUTPUT = CC_DIR + "/char-conversions.cs";

rulefor(CC_INTERMEDIATE, [], [ CHAR_CONVERSIONS_PROG ], function()
{
	shellcmd("$CHAR_CONVERSIONS_PROG --dump $CC_INTERMEDIATE");
});

rulefor(CC_OUTPUT, [ CC_INTERMEDIATE ], [ CHAR_CONVERSIONS_PROG ], function()
{
	shellcmd("$CHAR_CONVERSIONS_PROG --encode $CC_INTERMEDIATE CategoryData $CC_OUTPUT");
});

rulefor(ROOT + "/tysos/lib/char-conversions.cs", [ CC_OUTPUT ], [], function()
{
	cp(_RULE_INPUT, _RULE_OUTPUT);
});

/* Rules for UnicodeData */
US_DIR = ROOT + "/unicode_support";
US_PROG = typroject(US_DIR + "/unicode_support.csproj", "Release", "4.6.1", 1, [], REF_OVERRIDES);
US_INPUT = US_DIR + "/UnicodeData.txt";
US_OUTPUT = US_DIR + "/UnicodeData.cs";

rulefor(US_OUTPUT, [ US_INPUT ], [ US_PROG ], function()
{
	shellcmd("$US_PROG -o $US_OUTPUT $US_INPUT");
});

rulefor(ROOT + "/tysos/lib/UnicodeData.cs", [ US_OUTPUT ], [], function()
{
	cp(_RULE_INPUT, _RULE_OUTPUT);
});

/* Rules for assembling CLR binaries */
rulefor("%.obj", [ "%.exe" ], [ TYSILA, MSCORLIB, THIS ], function()
{
	shellcmd("$TYSILA -o $_RULE_OUTPUT -mno-sse4_1 $TYSILAFLAGS -D -d " + dir(_RULE_OUTPUT) + "/" + basefname(_RULE_OUTPUT) + ".txt -t $TYSILAARCH -q -L$MSCORLIBDIR -L$COREFX_LIBDIR -L$TYSOSDIR -L" + dir(_RULE_INPUT) + " $_RULE_INPUT");
});
rulefor("%.obj", [ "%.dll" ], [ TYSILA, MSCORLIB, THIS ], function()
{
	shellcmd("$TYSILA -o $_RULE_OUTPUT -mno-sse4_1 $TYSILAFLAGS -D -d " + dir(_RULE_OUTPUT) + "/" + basefname(_RULE_OUTPUT) + ".txt -t $TYSILAARCH -q -L$MSCORLIBDIR -L$COREFX_LIBDIR -L$TYSOSDIR -L" + dir(_RULE_INPUT) + " $_RULE_INPUT");
});
rulefor("%.to", [ "%.obj" ], [ TL, THIS ], function() {
	shellcmd("$TL -o $_RULE_OUTPUT --arch=$TLARCH $_RULE_INPUT");
});
rulefor("tysos.to", [ "tysos.bin" ], [ ELFHASH, THIS ], function() {
	shellcmd("$ELFHASH -o $_RULE_OUTPUT -e --update-sym _tysos_hash $_RULE_INPUT");
});


/* Generate missing function stubs */
TYSOS_OBJS = [ TYSOSOBJ, MSCORLIBOBJ, TYSOS_CPU_OBJ, LIBSUPCSA, METADATAOBJ, COREFX_LIB ];
GENMISSING_PROG = typroject("$ROOT/genmissing/genmissing.csproj", "Release", "4.6.1", 1, [], REF_OVERRIDES);
MISSING_OBJ = ROOT + "/tysos/missing.o";
rulefor(MISSING_OBJ, TYSOS_OBJS, [ GENMISSING_PROG ], function()
{
	shellcmd("$GENMISSING_PROG -o $_RULE_OUTPUT -t$TYSILAARCH -L$MSCORLIBDIR -L$COREFX_LIBDIR -L$TYSOSDIR $_RULE_INPUTS");
});

/* Rule for linking the kernel */
rulefor(KERNEL, [ TYSOS_OBJS, MISSING_OBJ ], [ ],
	function()
{
	shellcmd("$XCC -o $_RULE_OUTPUT $LDFLAGS -e kmain $_RULE_INPUTS");
});

/* Rules for C/asm code */
rulefor("%.o", [ "%.c" ], [ THIS ], function() {
	shellcmd("$XCC -o $_RULE_OUTPUT $CFLAGS -c $_RULE_INPUT");
});

rulefor("%.o", [ "%.s" ], [ THIS ], function() {
	shellcmd("$XCC -o $_RULE_OUTPUT $CFLAGS -c $_RULE_INPUT");
});

rulefor("%.$TARGET.o", [ "%.c" ], [ THIS ], function() {
	shellcmd("$XCC -o $_RULE_OUTPUT $CFLAGS -c $_RULE_INPUT");
});

rulefor("%.$TARGET.o", [ "%.s" ], [ THIS ], function() {
	shellcmd("$XCC -o $_RULE_OUTPUT $CFLAGS -c $_RULE_INPUT");
});

/* Rules for GRUB modules */
if(USE_GRUB)
{
	ZLIBDIR = ROOT + "/tload/tloadefi/zlib";
	CONFUSEDIR = ROOT + "/tload/tloadefi/confuse-2.7/src";
	GRUBCFLAGS = "-I$GRUBSRC -I$ROOT/grub-loader " +
		"-I$ROOT/tload/tloadefi/efilibc/inc " +
		"-I$CONFUSEDIR -I$ZLIBDIR " +
		"-I$ROOT/tload/tloadefi/efilibc/efi " +
		"-I$ROOT/tload/tloadefi/efilibc/efi/inc " +
		"-I$ROOT/tload/tloadefi/efilibc/efi/inc/protocol " +
		"-I$ROOT/tload/tloadefi/efilibc/efi/inc/x86_64 " +
		"-I$ROOT/efiloader " + 
		"-Wall -W -Os -DGRUB_MACHINE_PCBIOS=1 " +
		"-Wshadow -g -falign-jumps=1 -falign-loops=1 -falign-functions=1 -mno-mmx " +
		"-mno-sse -mno-sse2 -mno-3dnow -m32 -fno-stack-protector -mno-stack-arg-probe " +
		"-mrtd -mregparm=3 -MD -DGRUB_UTIL -std=gnu99 -ffreestanding " +
		"-DGRUB_FILE=__FILE__ -DTYGRUB -malign-data=compat";
	GRUBLDFLAGS = "-m32 -nostdlib -Wl,--build-id=none -Wl,-r,-d";

	rulefor("%.grub.o", [ "%.c" ], [ THIS, ROOT + "/efiloader/tloadkif.h" ], function() {
		return(shellcmd("$GRUBCC -o $_RULE_OUTPUT $GRUBCFLAGS -c $_RULE_INPUT"));
	});
	rulefor("%.grub.o", [ "%.s" ], [ THIS ], function() {
		return(shellcmd("$GRUBCC -o $_RULE_OUTPUT $GRUBCFLAGS -c $_RULE_INPUT"));
	});
	rulefor("%.target32.grub.o", [ "%.target.grub.o" ], [ THIS ], function() {
		return(shellcmd("$XOBJCOPY -O elf32-i386 $_RULE_INPUT $_RULE_OUTPUT"));
	});
	rulefor("%.target.grub.o", [ "%.s" ], [ THIS ], function() {
			return(shellcmd("$XCC -o $_RULE_OUTPUT -c $_RULE_INPUT"));
	});

	ZLIB = ZLIBDIR + "/libz.grub.a";
	rulefor(ZLIB, [ ZLIBDIR + "/adler32.grub.o", ZLIBDIR + "/compress.grub.o", ZLIBDIR + "/crc32.grub.o",
		ZLIBDIR + "/deflate.grub.o", ZLIBDIR + "/gzclose.grub.o", ZLIBDIR + "/gzlib.grub.o", ZLIBDIR + "/gzread.grub.o",
		ZLIBDIR + "/gzwrite.grub.o", ZLIBDIR + "/infback.grub.o", ZLIBDIR + "/inffast.grub.o", ZLIBDIR + "/inflate.grub.o",
		ZLIBDIR + "/inftrees.grub.o", ZLIBDIR + "/trees.grub.o", ZLIBDIR + "/uncompr.grub.o", ZLIBDIR + "/zutil.grub.o" ],
		[ THIS ],
		function()
	{
		shellcmd("$GRUBAR rcs $_RULE_OUTPUT $_RULE_INPUTS");
	});

	CONFUSE = CONFUSEDIR + "/libconfuse.grub.a";
	rulefor(CONFUSE, [ CONFUSEDIR + "/confuse.grub.o", CONFUSEDIR + "/lexer.grub.o" ],
		[ THIS ],
		function()
	{
		shellcmd("$GRUBAR rcs $_RULE_OUTPUT $_RULE_INPUTS");
	});

	GRUBLOADER = ROOT + "/grub-loader/tygrub.mod";
	rulefor(GRUBLOADER,
		[
			ROOT + "/grub-loader/tygrub.grub.o",
			ROOT + "/efiloader/cfg.grub.o",
			ROOT + "/tload/tloadefi/efilibc/strtod.grub.o",
			ROOT + "/tload/tloadefi/efilibc/scanf.grub.o",
			ROOT + "/tload/tloadefi/efilibc/strtoll.grub.o",
			ROOT + "/tload/tloadefi/efilibc/strtoull.grub.o",
			ROOT + "/tload/tloadefi/efilibc/string.grub.o",
			ROOT + "/tload/tloadefi/efilibc/atoi.grub.o",
			ROOT + "/tload/tloadefi/efilibc/atof.grub.o",
			ROOT + "/efiloader/vmem.grub.o",
			ROOT + "/grub-loader/grublibc.grub.o",
			ROOT + "/grub-loader/umoddi3.grub.o",
			ROOT + "/grub-loader/udivmoddi4.grub.o",
			ROOT + "/grub-loader/udivdi3.grub.o",
			ROOT + "/efiloader/load.grub.o",
			ROOT + "/efiloader/elf.grub.o",
			ROOT + "/efiloader/pmem_alloc.grub.o",
			ROOT + "/efiloader/kif.grub.o",
			ROOT + "/efiloader/tloadkif.grub.o",
			ROOT + "/efiloader/modules.grub.o",
			ROOT + "/grub-loader/tramp.target32.grub.o",
		],
		[ ZLIB, CONFUSE ],
		function()
	{
		shellcmd("$GRUBCC -o $_RULE_OUTPUT $GRUBLDFLAGS -L$ZLIBDIR -L$CONFUSEDIR $_RULE_INPUTS -lz.grub -lconfuse.grub");
	});
	// Special case tloadkif so it uses kmalloc rather than malloc
	rulefor(ROOT + "/efiloader/tloadkif.grub.o",
		[ ROOT + "/efiloader/tloadkif.c" ], [], function()
	{
		return(shellcmd("$GRUBCC -o $_RULE_OUTPUT $GRUBCFLAGS -Dmalloc=kmalloc -c $_RULE_INPUT"));
	});
}

/* Rules for EFI applications */
if(USE_UEFI)
{
	EFILIBCDIR = ROOT + "/tload/tloadefi/efilibc";
	ZLIBDIR = ROOT + "/tload/tloadefi/zlib";
	CONFUSEDIR = ROOT + "/tload/tloadefi/confuse-2.7/src";
	EFICFLAGS = "-I" + EFILIBCDIR + "/inc -I" + EFILIBCDIR + "/efi/inc -I" + EFILIBCDIR + "/efi/inc/protocol -I" + EFILIBCDIR + "/efi/inc/x86_64 -I" 
		+ EFILIBCDIR + " -I" + EFILIBCDIR + "/efi -I" + ZLIBDIR + " -I" + CONFUSEDIR + " -ffreestanding -std=gnu11 -Wall -Wextra -Werror";
	EFILDFLAGS = "-nostdlib -fno-use-linker-plugin -Wl,-dll -shared -Wl,--subsystem,10 -e efi_main";

	rulefor("%.efi.o", [ "%.c" ], [ THIS ], function() {
		return(shellcmd("$EFICC -o $_RULE_OUTPUT $EFICFLAGS -c $_RULE_INPUT"));
	});
	rulefor("%.efi.o", [ "%.s" ], [ THIS ], function() {
		shellcmd("$EFICC -o $_RULE_OUTPUT $EFICFLAGS -c $_RULE_INPUT");
	});

	EFILIBC = EFILIBCDIR + "/libefilibc.a";
	rulefor(EFILIBC, [
		EFILIBCDIR + "/abort.efi.o", EFILIBCDIR + "/atof.efi.o", 
		EFILIBCDIR + "/atoi.efi.o", EFILIBCDIR + "/console.efi.o", EFILIBCDIR + "/data.efi.o",
		EFILIBCDIR + "/efilibc.efi.o", EFILIBCDIR + "/file.efi.o", EFILIBCDIR + "/malloc.efi.o", EFILIBCDIR + "/misc.efi.o", EFILIBCDIR + "/printf.efi.o",
		EFILIBCDIR + "/scanf.efi.o", EFILIBCDIR + "/serial.efi.o", EFILIBCDIR + "/string.efi.o", EFILIBCDIR + "/strtod.efi.o", EFILIBCDIR + "/strtol.efi.o",
		EFILIBCDIR + "/strtoll.efi.o", EFILIBCDIR + "/strtoull.efi.o" ],
		[ THIS ],
		function()
	{
		shellcmd("$EFIAR rcs $_RULE_OUTPUT $_RULE_INPUTS");
	});

	ZLIB = ZLIBDIR + "/libz.a";
	rulefor(ZLIB, [ ZLIBDIR + "/adler32.efi.o", ZLIBDIR + "/compress.efi.o", ZLIBDIR + "/crc32.efi.o",
		ZLIBDIR + "/deflate.efi.o", ZLIBDIR + "/gzclose.efi.o", ZLIBDIR + "/gzlib.efi.o", ZLIBDIR + "/gzread.efi.o",
		ZLIBDIR + "/gzwrite.efi.o", ZLIBDIR + "/infback.efi.o", ZLIBDIR + "/inffast.efi.o", ZLIBDIR + "/inflate.efi.o",
		ZLIBDIR + "/inftrees.efi.o", ZLIBDIR + "/trees.efi.o", ZLIBDIR + "/uncompr.efi.o", ZLIBDIR + "/zutil.efi.o" ],
		[ THIS ],
		function()
	{
		shellcmd("$EFIAR rcs $_RULE_OUTPUT $_RULE_INPUTS");
	});

	CONFUSE = CONFUSEDIR + "/libconfuse.a";
	rulefor(CONFUSE, [ CONFUSEDIR + "/confuse.efi.o", CONFUSEDIR + "/lexer.efi.o" ],
		[ THIS ],
		function()
	{
		shellcmd("$EFIAR rcs $_RULE_OUTPUT $_RULE_INPUTS");
	});

	EFILOADER = ROOT + "/efiloader/efiloader.bin";
	rulefor(EFILOADER, [ ROOT + "/efiloader/main.efi.o", ROOT + "/efiloader/tloadkif.efi.o", ROOT + "/efiloader/load.efi.o",
		ROOT + "/efiloader/elf.efi.o", ROOT + "/efiloader/vmem.efi.o", ROOT + "/efiloader/modules.efi.o",
		ROOT + "/efiloader/kif.efi.o", ROOT + "/efiloader/cfg.efi.o", ROOT + "/efiloader/tramp.efi.o",
		ROOT + "/efiloader/pmem_alloc.efi.o" ],
		[ EFILIBC, ZLIB, CONFUSE ],
		function()
	{
		shellcmd("$EFICC -o $_RULE_OUTPUT $EFILDFLAGS -L$EFILIBCDIR -L$ZLIBDIR -L$CONFUSEDIR $_RULE_INPUTS -lz -lconfuse -lefilibc -lgcc");
	});
	// Special case tloadkif so it uses kmalloc rather than malloc
	rulefor(ROOT + "/efiloader/tloadkif.efi.o",
		[ ROOT + "/efiloader/tloadkif.c" ], [], function()
	{
		return(shellcmd("$EFICC -o $_RULE_OUTPUT $EFICFLAGS -Dmalloc=kmalloc -c $_RULE_INPUT"));
	});
}



/* The actual build */
setoutputcolor(["cyan"]);
print("Building for $TARGET\n");
setoutputcolor([]);

OUTDIR = ROOT + "/iso_image";
autodir(OUTDIR);
ISODIR = OUTDIR + "/iso";
autodir(ISODIR);

ISOIMAGE = OUTDIR + "/tysos.iso";

// Processes




// for quick kernel testing
PROCESSES = [];

KERNELTOGZ = ISODIR + "/tysos.to.gz";
rulefor(KERNELTOGZ, [ KERNELTO ], [ GZIP ], function()
{
	cp(KERNELTO, ISODIR);
	shellcmd("$GZIP -f $ISODIR/tysos.to");
});

if(defined(USE_GRUB))
{

}
else if(defined(USE_UEFI))
{
	IMGDIR = OUTDIR + "/img";
	autodir(IMGDIR + "/EFI/BOOT");
	autodir(IMGDIR + "/boot");

	rulefor(ISOIMAGE, [ KERNELTO, LIBSUPCS, MSCORLIB, EFILOADER, BOOT_MNU ] + PROCESSES,
		[ IMGDIR, IMGDIR + "/EFI/BOOT", IMGDIR + "/boot", ISODIR, ISOMAKE ],
		function()
	{
		cp(KERNELTO, IMGDIR);
		cp(LIBSUPCS, IMGDIR);
		cp(MSCORLIB, IMGDIR);
		cp(BOOT_MNU, IMGDIR + "/boot");

		foreach(proc in PROCESSES)
		{
			cp(proc, IMGDIR);
		}

		// Compress kernel
		shellcmd("$GZIP -f $IMGDIR/tysos.to");

		cp(EFILOADER, IMGDIR + "/EFI/BOOT/BOOTX64.EFI");

		shellcmd("$MKFAT -o $ISODIR/efi.img $IMGDIR");
		shellcmd("$ISOMAKE -as mkisofs -R -f --efi-boot efi.img -no-emul-boot -o $ISOIMAGE $ISODIR");
	});
}

if(MAKE_ISO == "y")
{
	if(build(ISOIMAGE))
	{
		setoutputcolor(["red"]);
		print("--------------------------------\n");
		print("Error\n");
		setoutputcolor([]);
		return(-1);
	}
}
else
{
	if(build(KERNELTO) || build(PROCESSES))
	{
		setoutputcolor(["red"]);
		print("--------------------------------\n");
		print("Error\n");
		setoutputcolor([]);
		return(-1);
	}
}

setoutputcolor(["cyan"]);
print("--------------------------------\n");
print("Done\n");
setoutputcolor([]);
